/*  MainWindow.java: main window class.
 * 
 *  Conman's Dictionary, a dictionary application for conlang makers.
 *  Copyright (C) 2006,2007  Urpo Lankinen
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.beastwithin.conmandictionary;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.xml.bind.JAXBException;
import org.xml.sax.SAXException;
import java.io.File;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;


/**
 * The main dictionary window of the application.
 * 
 * @author wwwwolf
 */
public class MainWindow extends javax.swing.JFrame {
    
    private Dictionary model;
    /// Notepad.
    private NotePad notePad;
    /// The language selection window.
    private LanguageNameDialog languageNameDialog;
    /// Main menu listener.
    private MainMenuListener mainMenuListener;
        
    public MainWindow() {
        mainMenuListener = new MainMenuListener(this);
        initComponents();
        // Set window title.
        this.setTitle(ConmanDictionary.APP_NAME);
        // Set icon.
        this.setIconImage(ConmanDictionary.getAppIcon());
        languageNameDialog = new LanguageNameDialog(this);
        notePad = new NotePad();

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftLanguagePanel = new org.beastwithin.conmandictionary.LanguagePanel();
        rightLanguagePanel = new org.beastwithin.conmandictionary.LanguagePanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileNewMenuItem = new javax.swing.JMenuItem();
        fileOpenMenuItem = new javax.swing.JMenuItem();
        fileSaveMenuItem = new javax.swing.JMenuItem();
        fileSaveAsMenuItem = new javax.swing.JMenuItem();
        fileExportDictdMenuItem = new javax.swing.JMenuItem();
        fileQuitSeparator = new javax.swing.JSeparator();
        fileQuitMenuItem = new javax.swing.JMenuItem();
        researchMenu = new javax.swing.JMenu();
        researchNotepadMenuItem = new javax.swing.JMenuItem();
        settingsMenu = new javax.swing.JMenu();
        settingsNamesMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpAboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Conman's Dictionary");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                windowCloseEvent(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        fileNewMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        fileNewMenuItem.setMnemonic('n');
        fileNewMenuItem.setText("New");
        fileNewMenuItem.setActionCommand("file-new");
        fileNewMenuItem.addActionListener(mainMenuListener);
        fileMenu.add(fileNewMenuItem);

        fileOpenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        fileOpenMenuItem.setMnemonic('o');
        fileOpenMenuItem.setText("Open...");
        fileOpenMenuItem.setActionCommand("file-open");
        fileOpenMenuItem.addActionListener(mainMenuListener);
        fileMenu.add(fileOpenMenuItem);

        fileSaveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        fileSaveMenuItem.setMnemonic('s');
        fileSaveMenuItem.setText("Save");
        fileSaveMenuItem.setActionCommand("file-save");
        fileSaveMenuItem.addActionListener(mainMenuListener);
        fileMenu.add(fileSaveMenuItem);

        fileSaveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        fileSaveAsMenuItem.setMnemonic('a');
        fileSaveAsMenuItem.setText("Save as...");
        fileSaveAsMenuItem.setActionCommand("file-save-as");
        fileSaveAsMenuItem.addActionListener(mainMenuListener);
        fileMenu.add(fileSaveAsMenuItem);

        fileExportDictdMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        fileExportDictdMenuItem.setMnemonic('e');
        fileExportDictdMenuItem.setText("Export to plain text...");
        fileExportDictdMenuItem.setActionCommand("file-export-dictd");
        fileExportDictdMenuItem.addActionListener(mainMenuListener);
        fileMenu.add(fileExportDictdMenuItem);
        fileMenu.add(fileQuitSeparator);

        fileQuitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        fileQuitMenuItem.setMnemonic('q');
        fileQuitMenuItem.setText("Quit");
        fileQuitMenuItem.setActionCommand("file-quit");
        fileQuitMenuItem.addActionListener(mainMenuListener);
        fileMenu.add(fileQuitMenuItem);

        menuBar.add(fileMenu);

        researchMenu.setMnemonic('r');
        researchMenu.setText("Research");

        researchNotepadMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        researchNotepadMenuItem.setMnemonic('n');
        researchNotepadMenuItem.setText("Notepad...");
        researchNotepadMenuItem.setActionCommand("research-notepad");
        researchNotepadMenuItem.addActionListener(mainMenuListener);
        researchMenu.add(researchNotepadMenuItem);

        menuBar.add(researchMenu);

        settingsMenu.setMnemonic('s');
        settingsMenu.setText("Settings");

        settingsNamesMenuItem.setMnemonic('l');
        settingsNamesMenuItem.setText("Language names...");
        settingsNamesMenuItem.setActionCommand("settings-languagenames");
        settingsNamesMenuItem.addActionListener(mainMenuListener);
        settingsMenu.add(settingsNamesMenuItem);

        menuBar.add(settingsMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        helpAboutMenuItem.setMnemonic('a');
        helpAboutMenuItem.setText("About...");
        helpAboutMenuItem.setActionCommand("help-about");
        helpAboutMenuItem.addActionListener(mainMenuListener);
        helpMenu.add(helpAboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(leftLanguagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightLanguagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(leftLanguagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(rightLanguagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void windowCloseEvent(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowCloseEvent
        quit();
    }//GEN-LAST:event_windowCloseEvent
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem fileExportDictdMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileNewMenuItem;
    private javax.swing.JMenuItem fileOpenMenuItem;
    private javax.swing.JMenuItem fileQuitMenuItem;
    private javax.swing.JSeparator fileQuitSeparator;
    private javax.swing.JMenuItem fileSaveAsMenuItem;
    private javax.swing.JMenuItem fileSaveMenuItem;
    private javax.swing.JMenuItem helpAboutMenuItem;
    private javax.swing.JMenu helpMenu;
    private org.beastwithin.conmandictionary.LanguagePanel leftLanguagePanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu researchMenu;
    private javax.swing.JMenuItem researchNotepadMenuItem;
    private org.beastwithin.conmandictionary.LanguagePanel rightLanguagePanel;
    private javax.swing.JMenu settingsMenu;
    private javax.swing.JMenuItem settingsNamesMenuItem;
    // End of variables declaration//GEN-END:variables

    
    
    
    
    
    private class MainMenuListener implements ActionListener {

        private MainWindow mainWindow = null;

        public MainMenuListener(MainWindow mainWindow) {
            this.mainWindow = mainWindow;
        }

        private void doSave() {
            try {
                mainWindow.getModel().saveDocument();
            } catch (IOException ioe) {
                JOptionPane.showMessageDialog(
                        mainWindow,
                        "File error while saving file:\n" +
                        ioe.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                ioe.printStackTrace();
            } catch (JAXBException jaxbe) {
                JOptionPane.showMessageDialog(
                        mainWindow,
                        "XML error while saving file:\n" +
                        jaxbe.getMessage() +
                        "\nFurther details printed at console.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                jaxbe.printStackTrace();
            }
            mainWindow.changesHaveBeenSaved();
            setAppTitle(mainWindow.getModel().getCurrentFile());
        }

        private void saveAs() {
            final JFileChooser fc = new JFileChooser();
            int ret = fc.showSaveDialog(mainWindow);
            if (ret != JFileChooser.APPROVE_OPTION) {
                return;
            }
            mainWindow.getModel().setCurrentFile(fc.getSelectedFile());
            doSave();
        }

        private void newDocument() {
            if (isUnsaved()) {
                int resp = JOptionPane.showConfirmDialog(
                        mainWindow,
                        "There are unsaved changes.\nReally clear everything?",
                        "Really clear everything?",
                        JOptionPane.YES_NO_OPTION);
                if (resp != 0) {
                    return;
                }
            }
            Dictionary newDocument = new Dictionary();
            mainWindow.setModel(newDocument);
            mainWindow.setAppTitle(null);
        }

        public void actionPerformed(ActionEvent e) {
            String c = e.getActionCommand();
            if (c.compareTo("file-quit")==0) {
                mainWindow.quit();
            } else if (c.compareTo("file-new")==0) {
                newDocument();
            } else if (c.compareTo("file-open")==0) {
                if (isUnsaved()) {
                    int resp = JOptionPane.showConfirmDialog(
                            mainWindow,
                            "There are unsaved changes.\nReally open another file?",
                            "Really open another file?",
                            JOptionPane.YES_NO_OPTION);
                    if (resp != 0) {
                        return;
                    }
                }
                final JFileChooser fc = new JFileChooser();
                int ret = fc.showOpenDialog(mainWindow);
                if (ret != JFileChooser.APPROVE_OPTION) {
                    return;
                }
                mainWindow.openDocument(fc.getSelectedFile());
            } else if (c.compareTo("file-save")==0) {
                // What's the file?
                if (mainWindow.getModel().getCurrentFile() == null) {
                    saveAs();
                } else {
                    doSave();
                }
            } else if (c.compareTo("file-save-as")==0) {
                saveAs();
            } else if (c.compareTo("file-export-dictd")==0) {
                final JFileChooser fc = new JFileChooser();
                int ret = fc.showSaveDialog(mainWindow);
                if (ret != JFileChooser.APPROVE_OPTION) {
                    return;
                }
                mainWindow.getModel().exportAsDictd(fc.getSelectedFile().getPath());
            } else if (c.compareTo("research-notepad")==0) {
                mainWindow.getNotePad().setVisible(true);
            } else if (c.compareTo("settings-languagenames")==0) {
                mainWindow.getLanguageNameDialog().open();
            } else if (c.compareTo("help-about")==0) {
                ConmanDictionary.showAboutDialog();
            } else {
                System.err.println("WARNING: Unhandled menu item " + c + ".");
            }
        }
    }

    
    
    private boolean isUnsaved() {
        return getModel().isUnsavedChanges();
    }

    public LanguageNameDialog getLanguageNameDialog() {
        return languageNameDialog;
    }

    public void quit() {
        if (isUnsaved()) {
            int resp = JOptionPane.showConfirmDialog(this,
                    "There are unsaved changes.\nReally quit?",
                    "Really quit?",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);
            if (resp != 0) {
                return;
            }
        }
        System.exit(0);
    }

    public void openDocument(File f) {
        try {
            Dictionary.validateFile(f);
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(
                    this,
                    "Unable to open the file " + f + ".\n" + ioe.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            ioe.printStackTrace();
            return;
        } catch (SAXException saxe) {
            JOptionPane.showMessageDialog(
                    this,
                    "The file format for file " + f + " is invalid.\n" + saxe.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            saxe.printStackTrace();
            return;
        }
        try {
            Dictionary loadedDictionary = Dictionary.loadDocument(f);
            this.setModel(loadedDictionary);
        } catch (JAXBException jaxbe) {
            JOptionPane.showMessageDialog(
                    this,
                    "XML error while loading file:\n" +
                    jaxbe.getMessage() +
                    "\nFurther details printed at console.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            jaxbe.printStackTrace();
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(
                    this,
                    "Error reading file:\n" +
                    ioe.getMessage() +
                    "\nFurther details printed at console.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            ioe.printStackTrace();
        }
        this.setAppTitle(f);
    }

    /**
     * Get the left-side language panel.
     * @return the left-side language panel.
     */
    public LanguagePanel getLeftLanguagePanel() {
        return leftLanguagePanel;
    }

    /**
     * Get the right-side language panel.
     * @return the right-side language panel.
     */
    public LanguagePanel getRightLanguagePanel() {
        return rightLanguagePanel;
    }

    public void changesHaveBeenSaved() {
        this.leftLanguagePanel.getEntryList().setModified(false);
        this.rightLanguagePanel.getEntryList().setModified(false);
    }

    public NotePad getNotePad() {
        return notePad;
    }

    /**
     * Will associate this window (and all subwindows etc) with a Dictionary document.
     * @param newModel
     */
    public void setModel(Dictionary newModel) {
        model = newModel;
        leftLanguagePanel.setEntryList(newModel.getDefinitions().get(0));
        rightLanguagePanel.setEntryList(newModel.getDefinitions().get(1));
        notePad.setModel(newModel.getNotePadDocument());
    // FIXME: Other associations go here!
    }

    public Dictionary getModel() {
        return model;
    }

    /**
     * Utility method to set the application title.
     * Uses "/file/name - Appname" format. Use null or file
     * name with just "" to set to "Appname".
     * 
     * @param currentlyOpenFile The file currently opened.
     */
    public void setAppTitle(File currentlyOpenFile) {
        if (currentlyOpenFile == null || currentlyOpenFile.toString().compareTo("")==0) {
            this.setTitle(ConmanDictionary.APP_NAME);
        } else {
            this.setTitle(currentlyOpenFile.toString() + " - " + ConmanDictionary.APP_NAME);
        }
    }
}
