/*  StatisticsWindow.java: Statistics window.
 * 
 *  Conman's Dictionary, a dictionary application for conlang makers.
 *  Copyright (C) 2013  Urpo Lankinen
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.beastwithin.conmandictionary.ui;

import org.beastwithin.conmandictionary.document.*;
import java.util.HashMap;
import javax.swing.text.html.*;

/**
 * Statistics window.
 * 
 * @author wwwwolf
 */
public class StatisticsWindow extends javax.swing.JDialog {
    
    private HTMLDocument statisticsText;

    /** 
     * Create the statistics window form.
     */
    public StatisticsWindow() {
        statisticsText = new HTMLDocument();
        initComponents();
    }

    public void updateStatisticsOn(Dictionary dictionary) {
        StringBuffer stats = new StringBuffer();

        // FIXME: DOES NO HTML ESCAPING RIGHT NOW. IT SHOULD.

        // Count headwords.
        stats.append("<h1>Headwords</h1>");
        stats.append("<table>");
        for(short i = 0; i <= 1; i++) {
            stats.append("<tr><td>");
            stats.append(dictionary.getDefinitions().get(i).getLanguage());
            stats.append(":</td><td>");
            stats.append(dictionary.getDefinitions().get(i).size());
            stats.append("</td></tr>");
        }
        stats.append("</table>");

        // Count wordclass usage.
        stats.append("<h1>Wordclass use</h1>");
        for(short lang = 0; lang <= 1; lang++) {
            // Heading for word list
            stats.append("<h2>");
            stats.append(dictionary.getDefinitions().get(lang).getLanguage());
            stats.append("</h2>");
            // Build a hash with word classes as keys and counts as values.
            HashMap<WordClass,Integer> results = new HashMap<WordClass,Integer>();
            EntryList dl = dictionary.getDefinitions().get(lang);
            for(int n = 0; n < dl.size(); n++) {
                WordClass w = dl.get(n).getWordClass();
                Integer c = results.get(w);
                if(c == null)
                    c = 0;
                c++;
                results.put(w, c);
            }
            // Present results.
            stats.append("<table>");
            for(WordClass w : results.keySet()) {
                stats.append("<tr><td>");
                stats.append(w.getName());
                stats.append(":</td><td>");
                stats.append(results.get(w));
                stats.append("</td></tr>");
            }
            stats.append("</table>");
        }

        statisticsView.setText(stats.toString());
    }

    public void close() {
        dispose();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statisticsScroll = new javax.swing.JScrollPane();
        statisticsView = new javax.swing.JEditorPane();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        statisticsView.setEditable(false);
        statisticsView.setContentType("text/html"); // NOI18N
        statisticsScroll.setViewportView(statisticsView);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/beastwithin/conmandictionary/ui/UIMessages"); // NOI18N
        closeButton.setText(bundle.getString("StatisticsWindow.closeButton")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statisticsScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(closeButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statisticsScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JScrollPane statisticsScroll;
    private javax.swing.JEditorPane statisticsView;
    // End of variables declaration//GEN-END:variables
}
